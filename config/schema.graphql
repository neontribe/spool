schema {
  query: Query
  mutation: Mutations
}

input CreateEntryInput {
  entry: EntryInput
  clientMutationId: String!
}

type CreateEntryPayload {
  viewer: Viewer
  entryEdge: EntryEdge
  clientMutationId: String!
}

type Entry implements Node {
  id: ID!
  _id: Int
  media: Media
  author: User
  owner: User
  sentiment: Sentiment
  topic: Topic
  timestamp: String
}

type EntryConnection {
  pageInfo: PageInfo!
  edges: [EntryEdge]
}

type EntryEdge {
  node: Entry
  cursor: String!
}

input EntryInput {
  media: MediaInput
  sentiment: String
  topic: String
}

type ImageMedia {
  text: String
}

union Media = VideoMedia | ImageMedia | TextMedia

input MediaInput {
  text: String
  video: String
  thumbnail: String
  image: String
}

type Mutations {
  createEntry(input: CreateEntryInput!): CreateEntryPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  node(id: ID!): Node
  viewer: Viewer
}

type Sentiment {
  type: String
}

type TextMedia {
  text: String
}

type Topic {
  type: String
}

type User {
  id: Int
}

type VideoMedia {
  video: String
  thumbnail: String
}

type Viewer implements Node {
  id: ID!
  entries(after: String, first: Int, before: String, last: Int): EntryConnection
}
