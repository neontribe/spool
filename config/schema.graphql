schema {
  query: Query
  mutation: Mutations
}

type Consumer implements Node {
  # The ID of an object
  id: ID!
  topics: [Topic]
  access(range: DateRangeInput): DataAccess
}

input CreateEntryInput {
  entry: EntryInput
  clientMutationId: String
}

type CreateEntryPayload {
  creator: Creator
  entryEdge: EntryEdge
  clientMutationId: String
}

type Creator implements Node {
  # The ID of an object
  id: ID!
  topics: [Topic]
  entries(after: String, first: Int, before: String, last: Int): EntryConnection
  sharing: Boolean
  seenSharing: Boolean
  seenIntroduction: Boolean
  happyCount: Int
  sadCount: Int
}

type CreatorActivity {
  active: Int
  stale: Int
}

type CreatorSentiment {
  happy: Int
  sad: Int
}

type DataAccess {
  sentiment: CreatorSentiment
  topics(range: DateRangeInput): [TopicCount]
  activity: CreatorActivity
  entries(topics: [String], after: String, first: Int, before: String, last: Int): EntryConnection
}

input DateRangeInput {
  from: String!
  to: String!
}

input DeleteEntryInput {
  entryId: Int
  clientMutationId: String
}

type DeleteEntryPayload {
  creator: Creator
  deletedEntryId: Int
  clientMutationId: String
}

type Entry implements Node {
  # The ID of an object
  id: ID!
  media: Media
  sentiment: Sentiment
  topics: [Topic]
  created: String
  updated: String
}

# A connection to a list of items.
type EntryConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [EntryEdge]
}

# An edge in a connection.
type EntryEdge {
  # The item at the end of the edge
  node: Entry

  # A cursor for use in pagination
  cursor: String!
}

input EntryInput {
  media: MediaInput
  sentiment: String
  topics: [String]
}

type Media {
  text: String
  video: String
  videoThumbnail: String
  image: String
  imageThumbnail: String
}

input MediaInput {
  text: String
  video: String
  videoThumbnail: String
  image: String
  imageThumbnail: String
}

type Meta {
  regions: [Region]
  roles: [Role]
}

type Mutations {
  createEntry(input: CreateEntryInput!): CreateEntryPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  deleteEntry(input: DeleteEntryInput!): DeleteEntryPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  creator: Creator
  consumer: Consumer
  user: User
  meta: Meta
}

type Region {
  type: String
  services: [Service]
}

type Role {
  type: String
  name: String
  secret: String
}

type Sentiment {
  type: String
}

type Service {
  type: String
  name: String
}

type Topic {
  type: String
  name: String
}

type TopicCount {
  topic: Topic
  entryCount: Int
  creatorCount: Int
}

input UpdateUserInput {
  user: UserInput
  clientMutationId: String
}

type UpdateUserPayload {
  user: User
  clientMutationId: String
}

type User implements Node {
  # The ID of an object
  id: ID!
  role: String
  region: String
}

input UserInput {
  region: String!
  roleSecret: String!
}
