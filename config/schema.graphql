schema {
  query: Query
  mutation: Mutations
}

type Consumer {
  # The ID of an object
  id: ID!
  creatorActivityCount(range: DateRangeInput): CreatorActivityCount
  topicCounts(range: DateRangeInput): [TopicCount]
  topics: [Topic]
  requests(after: String, first: Int, before: String, last: Int): RequestConnection
}

input CreateEntryInput {
  entry: EntryInput
  clientMutationId: String!
}

type CreateEntryPayload {
  creator: Creator
  entryEdge: EntryEdge
  clientMutationId: String!
}

input CreateRequestInput {
  request: RequestInput
  clientMutationId: String!
}

type CreateRequestPayload {
  consumer: Consumer
  clientMutationId: String!
}

type Creator implements Node {
  # The ID of an object
  id: ID!
  topics: [Topic]
  entries(after: String, first: Int, before: String, last: Int): EntryConnection
  requests(after: String, first: Int, before: String, last: Int): UserRequestConnection
  happyCount: Int
  sadCount: Int
}

type CreatorActivityCount {
  active: Int
  stale: Int
}

input DateRangeInput {
  from: String!
  to: String!
}

type Entry implements Node {
  # The ID of an object
  id: ID!
  media: Media
  sentiment: Sentiment
  topics: [Topic]
  created: String
  updated: String
  requests: [EntryRequest]
}

# A connection to a list of items.
type EntryConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [EntryEdge]
}

# An edge in a connection.
type EntryEdge {
  # The item at the end of the edge
  node: Entry

  # A cursor for use in pagination
  cursor: String!
}

input EntryInput {
  media: MediaInput
  sentiment: String
  topics: [String]
}

type EntryRequest {
  access: Boolean
  userRequest: UserRequest
}

type Media {
  text: String
  video: String
  videoThumbnail: String
  image: String
  imageThumbnail: String
}

input MediaInput {
  text: String
  video: String
  videoThumbnail: String
  image: String
  imageThumbnail: String
}

type Meta {
  regions: [RegionDefinitionType]
  roles: [RoleDefinition]
}

type Mutations {
  createEntry(input: CreateEntryInput!): CreateEntryPayload
  createRequest(input: CreateRequestInput!): CreateRequestPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateUserRequest(input: UpdateUserRequestInput!): UpdateUserRequestPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  creator: Creator
  consumer: Consumer
  user: User
  meta: Meta
}

type RegionDefinitionType {
  type: String
}

type Request implements Node {
  # The ID of an object
  id: ID!
  from: String
  to: String
  region: String
  topics: [Topic]
  reason: String
  name: String
  org: String
  avatar: String
  created: String
  updated: String
  entries: EntryConnection
}

# A connection to a list of items.
type RequestConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [RequestEdge]
}

# An edge in a connection.
type RequestEdge {
  # The item at the end of the edge
  node: Request

  # A cursor for use in pagination
  cursor: String!
}

input RequestInput {
  range: DateRangeInput
  reason: String
  name: String
  org: String
  avatar: String
  topics: [String]
}

type RoleDefinition {
  type: String
  name: String
  secret: String
}

type Sentiment {
  type: String
}

type Topic {
  type: String
  name: String
}

type TopicCount {
  topic: Topic
  entryCount: Int
  creatorCount: Int
}

input UpdateUserInput {
  user: UserInput
  clientMutationId: String!
}

type UpdateUserPayload {
  user: User
  clientMutationId: String!
}

input UpdateUserRequestInput {
  userRequest: UserRequestInputType
  clientMutationId: String!
}

type UpdateUserRequestPayload {
  creator: Creator
  userRequestId: String
  clientMutationId: String!
}

type User implements Node {
  # The ID of an object
  id: ID!
  role: String
  region: String
}

input UserInput {
  region: String!
  roleSecret: String!
}

type UserRequest implements Node {
  # The ID of an object
  id: ID!
  request: Request
  seen: Boolean
  created: String
  updated: String
}

# A connection to a list of items.
type UserRequestConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserRequestEdge]
}

# An edge in a connection.
type UserRequestEdge {
  # The item at the end of the edge
  node: UserRequest

  # A cursor for use in pagination
  cursor: String!
}

input UserRequestInputType {
  id: Int!
  access: Boolean!
  hide: Boolean!
}
